import logging
from airflow.config_templates.airflow_local_settings import DEFAULT_LOGGING_CONFIG

class TaskInstanceWarningFilter(logging.Filter):
    def filter(self, record):
        # Suppress all warnings from taskinstance
        if record.levelno == logging.WARNING and record.name == 'airflow.task':
            return False
        return True

# Define a placeholder mask_secrets filter
class MaskSecretsFilter(logging.Filter):
    def filter(self, record):
        # Placeholder implementation
        return True

LOGGING_CONFIG = DEFAULT_LOGGING_CONFIG.copy()

# Set the root logger level to INFO
LOGGING_CONFIG['root']['level'] = 'INFO'

# Register the custom filter
LOGGING_CONFIG['filters'] = {
    'task_instance_warning_filter': {
        '()': TaskInstanceWarningFilter,
    },
    'mask_secrets': {
        '()': MaskSecretsFilter,
    }
}

# Add the custom filter to the taskinstance logger
if 'airflow.task' in LOGGING_CONFIG['loggers']:
    LOGGING_CONFIG['loggers']['airflow.task']['filters'] = ['task_instance_warning_filter']
else:
    LOGGING_CONFIG['loggers']['airflow.task'] = {
        'level': 'INFO',
        'handlers': ['console'],
        'propagate': False,
        'filters': ['task_instance_warning_filter'],
    }

logging.config.dictConfig(LOGGING_CONFIG)
